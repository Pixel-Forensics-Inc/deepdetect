diff --git a/c10/util/string_view.h b/c10/util/string_view.h
index 2958887afc..a331022aab 100644
--- a/c10/util/string_view.h
+++ b/c10/util/string_view.h
@@ -112,7 +112,8 @@ class basic_string_view final {
     return C10_UNLIKELY(pos >= size_)
         ? (throw std::out_of_range(
                "string_view::operator[] or string_view::at() out of range. Index: " +
-               c10::guts::to_string(pos) + ", size: " + c10::guts::to_string(size())),
+               c10::guts::to_string(pos) +
+               ", size: " + c10::guts::to_string(size())),
            at_(0))
         : at_(pos);
 #else
@@ -194,7 +195,8 @@ class basic_string_view final {
     return (pos > size_)
         ? (throw std::out_of_range(
                "basic_string_view::substr parameter out of bounds. Index: " +
-               c10::guts::to_string(pos) + ", size: " + c10::guts::to_string(size())),
+               c10::guts::to_string(pos) +
+               ", size: " + c10::guts::to_string(size())),
            substr_())
         : substr_(pos, count);
 #else
@@ -326,8 +328,8 @@ class basic_string_view final {
     return ends_with(basic_string_view(suffix));
   }
 
-  constexpr size_type find(basic_string_view v, size_type pos = 0) const
-      noexcept {
+  constexpr size_type find(basic_string_view v, size_type pos = 0)
+      const noexcept {
 #if __cpp_constexpr >= 201304
     // if we are in C++14, write it iteratively. This is faster.
     if (v.size() == 0) {
@@ -369,8 +371,8 @@ class basic_string_view final {
     return find(basic_string_view(s), pos);
   }
 
-  constexpr size_type rfind(basic_string_view v, size_type pos = npos) const
-      noexcept {
+  constexpr size_type rfind(basic_string_view v, size_type pos = npos)
+      const noexcept {
 #if __cpp_constexpr >= 201304
     // if we are in C++14, write it iteratively. This is faster.
     if (v.size() == 0) {
@@ -419,8 +421,8 @@ class basic_string_view final {
     return find_first_if_(pos, stringViewContainsChar_{v});
   }
 
-  constexpr size_type find_first_of(CharT ch, size_type pos = 0) const
-      noexcept {
+  constexpr size_type find_first_of(CharT ch, size_type pos = 0)
+      const noexcept {
     return find_first_if_(pos, charIsEqual_{ch});
   }
 
@@ -440,8 +442,8 @@ class basic_string_view final {
     return find_last_if_(pos, stringViewContainsChar_{v});
   }
 
-  constexpr size_type find_last_of(CharT ch, size_type pos = npos) const
-      noexcept {
+  constexpr size_type find_last_of(CharT ch, size_type pos = npos)
+      const noexcept {
     return find_last_if_(pos, charIsEqual_{ch});
   }
 
@@ -462,8 +464,8 @@ class basic_string_view final {
     return find_first_if_(pos, stringViewDoesNotContainChar_{v});
   }
 
-  constexpr size_type find_first_not_of(CharT ch, size_type pos = 0) const
-      noexcept {
+  constexpr size_type find_first_not_of(CharT ch, size_type pos = 0)
+      const noexcept {
     return find_first_if_(pos, charIsNotEqual_{ch});
   }
 
@@ -485,8 +487,8 @@ class basic_string_view final {
     return find_last_if_(pos, stringViewDoesNotContainChar_{v});
   }
 
-  constexpr size_type find_last_not_of(CharT ch, size_type pos = npos) const
-      noexcept {
+  constexpr size_type find_last_not_of(CharT ch, size_type pos = npos)
+      const noexcept {
     return find_last_if_(pos, charIsNotEqual_{ch});
   }
 
@@ -528,8 +530,8 @@ class basic_string_view final {
   }
 
   template <class Condition>
-  constexpr size_type find_first_if_(size_type pos, Condition&& condition) const
-      noexcept {
+  constexpr size_type find_first_if_(size_type pos, Condition&& condition)
+      const noexcept {
 #if __cpp_constexpr >= 201304
     // if we are in C++14, write it iteratively. This is faster.
     if (pos + 1 <= size()) {
@@ -551,8 +553,8 @@ class basic_string_view final {
   }
 
   template <class Condition>
-  constexpr size_type find_last_if_(size_type pos, Condition&& condition) const
-      noexcept {
+  constexpr size_type find_last_if_(size_type pos, Condition&& condition)
+      const noexcept {
 #if __cpp_constexpr >= 201304
     // if we are in C++14, write it iteratively. This is faster.
     if (size() > 0) {
@@ -579,12 +581,14 @@ class basic_string_view final {
   }
 
   constexpr bool equals_(basic_string_view rhs) const {
-    // We don't use string_view::compare() here but implement it manually because
-    // only looking at equality allows for more optimized code.
-#if defined(__GNUC__)
-    return size() == rhs.size() && 0 == __builtin_memcmp(data(), rhs.data(), size());
+    // We don't use string_view::compare() here but implement it manually
+    // because only looking at equality allows for more optimized code.
+#if defined(__GNUC__) && !defined(__CUDACC__)
+    return size() == rhs.size() &&
+        0 == __builtin_memcmp(data(), rhs.data(), size());
 #elif __cpp_constexpr >= 201304
-    // if we are in C++14, write it iteratively. This is faster than the recursive C++11 implementation below.
+    // if we are in C++14, write it iteratively. This is faster than the
+    // recursive C++11 implementation below.
     if (size() != rhs.size()) {
       return false;
     }
@@ -643,7 +647,8 @@ class basic_string_view final {
 };
 
 template <class CharT>
-const typename basic_string_view<CharT>::size_type basic_string_view<CharT>::npos;
+const typename basic_string_view<CharT>::size_type
+    basic_string_view<CharT>::npos;
 
 template <class CharT>
 inline std::basic_ostream<CharT>& operator<<(
